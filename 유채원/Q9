"""
어떤 자연수 n이 있을 때, d(n)을 n의 각 자릿수 숫자들과 n 자신을 더한 숫자라고 정의하자.
n을 d(n)의 제네레이터(generator)라고 한다.
예를 들어 d(91) = 9 + 1 + 91 = 101인 경우 91은 101의 제네레이터이다.
어떤 숫자들은 하나 이상의 제네레이터를 가지고 있는데, 101의 제네레이터는 91 뿐 아니라 100도 있다.
그런데 반대로, 제네레이터가 없는 숫자들도 있으며, 이런 숫자를 인도의 수학자 Kaprekar가 셀프 넘버(self-number)라 이름 붙였다.
예를 들어 1,3,5,7,9,20,31 은 셀프 넘버 들이다.
1 이상이고 5000 보다 작은 모든 셀프 넘버들의 합을 구하라.
"""

==========================================================================
# 과제 1. 1부터 30까지의 자연수 중에서, 제너레이터가 있는 수의 합을 구하시오. 
## 출력 : 420
==========================================================================
def d(n) :  #제너레이터 함수 만들어줌
    gen = int(n/10)%10 + n%10 + n  #제너레이터 함수 만드는 과정
    return gen 

sum = 0  #제네레이터 수를 더할 sum 지정
gen_num = list(([d(i) for i in range(1,31) if d(i) < 31])) #변수가 30을 넘지 않을 때, 30까지 반복하여 gen_num 리스트에 넣어준다.
for i in range(0,len(gen_num)) : #gen_num에 있는 수만큼 다 더해주는 과정
    sum += gen_num[i]

print(sum)






==========================================================================
# 과제 2. 1이상 5000 미만의 셀프 넘버(제너레이터가 하나도 없는 수)의 합을 구하시오.
## 출력 : 1227365
==========================================================================
gen_num = [] #제너레이터 리스트 생성(셀프넘버를 찾기 위해 먼저 만들어줌)

for i in range(1, 5000): #5000까지 반복
    n = int(i/1000) + int(i/100)%10 + int(i/10)%10 + i%10 + i #제너레이터 함수(int로 정수 만들어 줌)
    if n not in gen_num : #gen_num 안에 없다면, (제너레이터가 하나도 없는 수를 만들어야 하기 때문)
        gen_num.append(n) #n을 gen_num에 넣어준다

sum = 0    #셀프 넘버 합하는 과정
for i in range(1, 5001): 
    if i not in gen_num:
        sum = sum + i  #sum에 셀프넘버를 넣어 더해준다

print(sum)
