'''
여기서의 “부분”은 LCS문제에서의 “부분”과는 다른 의미임을 명심하라. nice라는 문자열이 있다면 이 문제에서의 부분문자열의 집합은 {‘’, n, i, c, e, ni, ic, ce, nic, nice}이다.
LCS문제에서의 “부분”에서는 nce도 하나의 부분문자열로 볼 수 있지만 이 문제에서는 부분문자열이 아니다. (즉, 이 문제에서의 “부분”은 원래 문자열에서 일정 부분을 잘라낸 것이다.)
photography와 autograph 두 문자열이 있다고 할 때, ph, grap, to 등의 부분문자열이 있으며, 이 중 최대의 길이를 갖는 부분문자열은 tograph이다.
입력
두 줄에 각각의 스트링이 주어진다. 각 스트링의 길이는 4000이하이다.
photography
autograph
출력
첫줄에 찾은 부분문자열의 길이, 둘째 줄에 가장 긴 공통의 부분문자열을 출력한다.
7
tograph
'''
"""
========================================================================
과제1. 입력된 문자열의 부분문자열을 구하시오. 
      - 조건1. 부분문자열은 입력된 문자열 안에 연속된 문자열을 의미한다.
      - 조건2. 부분문자열에는 공집합도 포함
      - input_string = 'nice'
      - 출력값 = ['','n','i','c','e','ni','ic','ce','nic','ice','nice']
========================================================================
"""


def project_1():
    ans = set() #문자열 집합
    inp = input('input_string = ')

    for a in range(0, len(inp)): #처음부터 입력값의 길이만큼 반복
        for b in range(a,len(inp)+1): #for을 두 번 이용해 a부터 입력값 끝자리까지 반복
            ans.add(inp[a:b]) #값을 ans에 잘라서 넣음


    print(ans)


"""
========================================================================
과제2. 아래와 같이 두 문자열이 입력되었을 때, 두 문자열의 공통된 부분문자열 중 가장 긴 부분문자열의 길이와 실제값을 출력하시오.
      - 조건1. 부분문자열은 입력된 문자열 안에 연속된 문자열을 의미한다.
      - 조건2. 부분문자열에는 공집합도 포함
      - input_string1 = 'photography'
      - input_string2 = 'autograph'
      - 출력값 = 7 tograph
========================================================================
"""


def project_2():
    inp = input('input_string = ')
    (str_1, str_2) = inp.split() #각각 값을 공백을 기준으로 나눔
    if len(str_2) > len(str_1): #길이 비교
        str_1, str_2 = str_2, str_1

    m_len = 0 #길이를 세기 위함
    real = '' 

    for a in range(1, len(str_2)+1): #위와 유사하게 코드 진행
        for b in range(len(str_2)):
            ans = str_2[a:b+a] 
            if str_1.count(ans) and len(ans) > m_len: #만약에 문자열 길이보다 카운트한 것과 길이가 더 길다면 
                m_len = len(ans) #문자열의 길이는 ans의 길이
                real = ans #실제값은 ans값

    print(m_len, real) 



if __name__ == "__main__":
    project_1()
    #project_2()
